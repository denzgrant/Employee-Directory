{"version":3,"sources":["components/header.js","components/table.js","App.js","serviceWorker.js","index.js"],"names":["Header","Jumbotron","fluid","Container","class","MaterialEmployTable","style","fontSize","margin","textAlign","color","backgroundColor","title","data","columns","field","headerStyle","fontColor","options","paging","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0TAmBeA,G,OAbA,WACb,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,wBAAIC,MAAM,SAAV,sC,kBCoKOC,EA1Ka,WAiJ1B,OACE,yBAAKC,MAAO,CACVC,SAAU,GACVC,OAAQ,GACRC,UAAW,WAGX,kBAAC,IAAD,CAAeH,MAAO,CACpBI,MAAO,QACPC,gBAAiB,UAGjBC,MAAM,wBACNC,KA5JO,CACX,CACE,GAAM,EACN,KAAQ,UACR,MAAS,gBACT,MAAS,OACT,MAAS,qBAEX,CACE,GAAM,EACN,KAAQ,QACR,MAAS,qBACT,MAAS,OACT,MAAS,mBAEX,CACE,GAAM,EACN,KAAQ,YACR,MAAS,gBACT,MAAS,OACT,MAAS,yBAEX,CACE,GAAM,EACN,KAAQ,WACR,MAAS,6BACT,MAAS,OACT,MAAS,sBAEX,CACE,GAAM,EACN,KAAQ,QACR,MAAS,aACT,MAAS,OACT,MAAS,qBAEX,CACE,GAAM,EACN,KAAQ,SACR,MAAS,cACT,MAAS,OACT,MAAS,oBAEX,CACE,GAAM,EACN,KAAQ,UACR,MAAS,iBACT,MAAS,OACT,MAAS,iBAEX,CACE,GAAM,EACN,KAAQ,QACR,MAAS,eACT,MAAS,OACT,MAAS,oBAEX,CACE,GAAM,EACN,KAAQ,YACR,MAAS,mBACT,MAAS,OACT,MAAS,kBAEX,CACE,GAAM,GACN,KAAQ,YACR,MAAS,yBACT,MAAS,OACT,MAAS,yBAEX,CACE,GAAM,GACN,KAAQ,SACR,MAAS,cACT,MAAS,OACT,MAAS,kBAEX,CACE,GAAM,GACN,KAAQ,WACR,MAAS,iBACT,MAAS,OACT,MAAS,sBAEX,CACE,GAAM,GACN,KAAQ,QACR,MAAS,UACT,MAAS,OACT,MAAS,qBAEX,CACE,GAAM,GACN,KAAQ,SACR,MAAS,eACT,MAAS,OACT,MAAS,qBA4DPC,QAzDU,CACd,CACEF,MAAO,KAAMG,MAAO,KACpBC,YAAa,CACXL,gBAAiB,MACjBJ,SAAU,GACVU,UAAW,QAIf,CACEL,MAAO,OAAQG,MAAO,OACtBC,YAAa,CACXL,gBAAiB,MACjBJ,SAAU,GACVU,UAAW,QAGf,CACEL,MAAO,QAASG,MAAO,QACvBC,YAAa,CACXL,gBAAiB,MACjBJ,SAAU,GACVU,UAAW,QAGf,CACEL,MAAO,QAASG,MAAO,QACvBC,YAAa,CACXL,gBAAiB,MACjBJ,SAAU,GACVU,UAAW,QAGf,CACEL,MAAO,QAASG,MAAO,QACvBC,YAAa,CACXL,gBAAiB,MACjBJ,SAAU,GACVU,UAAW,SAmBXC,QAAS,CACPC,QAAQ,OCjJHC,E,uKAVX,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c78b9f06.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Jumbotron, Container } from 'react-bootstrap';\r\nimport './header.css';\r\n\r\n\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Jumbotron fluid>\r\n      <Container>\r\n        <h1 class=\"title\">Professor X's Blue & Gold Team</h1>\r\n      </Container>\r\n    </Jumbotron>\r\n\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default Header;\r\n\r\n","import React from 'react';\r\nimport MaterialTable from 'material-table';\r\n\r\n\r\nconst MaterialEmployTable = () => {\r\n\r\n  const data = [\r\n    {\r\n      \"id\": 1,\r\n      \"name\": \"Cyclops\",\r\n      \"alias\": \"Scott Summers\",\r\n      \"squad\": \"Blue\",\r\n      \"email\": \"ssummers@xmen.org\"\r\n    },\r\n    {\r\n      \"id\": 2,\r\n      \"name\": \"Beast\",\r\n      \"alias\": \"Henry (Hank) McCoy\",\r\n      \"squad\": \"Blue\",\r\n      \"email\": \"hmccoy@xmen.org\"\r\n    },\r\n    {\r\n      \"id\": 3,\r\n      \"name\": \"Wolverine\",\r\n      \"alias\": \"James Howlett\",\r\n      \"squad\": \"Blue\",\r\n      \"email\": \"donttryitbub@xmen.org\"\r\n    },\r\n    {\r\n      \"id\": 4,\r\n      \"name\": \"Psylocke\",\r\n      \"alias\": \"Elizabeth (Betsy) Braddock\",\r\n      \"squad\": \"Blue\",\r\n      \"email\": \"ebraddock@xmen.org\"\r\n    },\r\n    {\r\n      \"id\": 5,\r\n      \"name\": \"Rogue\",\r\n      \"alias\": \"Anna Marie\",\r\n      \"squad\": \"Blue\",\r\n      \"email\": \"jhowlett@xmen.org\"\r\n    },\r\n    {\r\n      \"id\": 6,\r\n      \"name\": \"Gambit\",\r\n      \"alias\": \"Remy LeBeau\",\r\n      \"squad\": \"Blue\",\r\n      \"email\": \"rlebeau@xmen.org\"\r\n    },\r\n    {\r\n      \"id\": 7,\r\n      \"name\": \"Jubilee\",\r\n      \"alias\": \"Jubilation Lee\",\r\n      \"squad\": \"Blue\",\r\n      \"email\": \"jlee@xmen.org\"\r\n    },\r\n    {\r\n      \"id\": 8,\r\n      \"name\": \"Storm\",\r\n      \"alias\": \"Ororo Munroe\",\r\n      \"squad\": \"Gold\",\r\n      \"email\": \"omunroe@xmen.org\"\r\n    },\r\n    {\r\n      \"id\": 9,\r\n      \"name\": \"Jean Grey\",\r\n      \"alias\": \"Jean Elaine Grey\",\r\n      \"squad\": \"Gold\",\r\n      \"email\": \"jgrey@xmen.org\"\r\n    },\r\n    {\r\n      \"id\": 10,\r\n      \"name\": \"Archangel\",\r\n      \"alias\": \"Warren Worthington III\",\r\n      \"squad\": \"Gold\",\r\n      \"email\": \"wworthington@xmen.org\"\r\n    },\r\n    {\r\n      \"id\": 11,\r\n      \"name\": \"Iceman\",\r\n      \"alias\": \"Bobby Drake\",\r\n      \"squad\": \"Gold\",\r\n      \"email\": \"brake@xmen.org\"\r\n    },\r\n    {\r\n      \"id\": 12,\r\n      \"name\": \"Colossus\",\r\n      \"alias\": \"Piotr Rasputin\",\r\n      \"squad\": \"Gold\",\r\n      \"email\": \"prasputin@xmen.org\"\r\n    },\r\n    {\r\n      \"id\": 13,\r\n      \"name\": \"Forge\",\r\n      \"alias\": \"Unknown\",\r\n      \"squad\": \"Gold\",\r\n      \"email\": \"funknown@xmen.org\"\r\n    },\r\n    {\r\n      \"id\": 14,\r\n      \"name\": \"Bishop\",\r\n      \"alias\": \"Lucas Bishop\",\r\n      \"squad\": \"Gold\",\r\n      \"email\": \"lbishop@xmen.org\"\r\n    }\r\n  ]\r\n  const columns = [\r\n    {\r\n      title: 'ID', field: 'id',\r\n      headerStyle: {\r\n        backgroundColor: 'red',\r\n        fontSize: 20,\r\n        fontColor: 'Red'\r\n      }\r\n\r\n    },\r\n    {\r\n      title: 'Name', field: 'name',\r\n      headerStyle: {\r\n        backgroundColor: 'red',\r\n        fontSize: 20,\r\n        fontColor: 'Red'\r\n      }\r\n    },\r\n    {\r\n      title: 'Alias', field: 'alias',\r\n      headerStyle: {\r\n        backgroundColor: 'red',\r\n        fontSize: 20,\r\n        fontColor: 'Red'\r\n      }\r\n    },\r\n    {\r\n      title: 'Squad', field: 'squad',\r\n      headerStyle: {\r\n        backgroundColor: 'red',\r\n        fontSize: 20,\r\n        fontColor: 'Red'\r\n      }\r\n    },\r\n    {\r\n      title: 'Email', field: 'email',\r\n      headerStyle: {\r\n        backgroundColor: 'red',\r\n        fontSize: 20,\r\n        fontColor: 'Red'\r\n      }\r\n    }\r\n  ]\r\n  return (\r\n    <div style={{\r\n      fontSize: 25,\r\n      margin: 10,\r\n      textAlign: 'center',\r\n    }}\r\n    >\r\n      <MaterialTable style={{\r\n        color: 'Black',\r\n        backgroundColor: 'yellow'\r\n\r\n      }}\r\n        title=\"The Uncanny X-Men '91\"\r\n        data={data}\r\n        columns={columns}\r\n        options={{\r\n          paging: false,\r\n        }}\r\n\r\n      />\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default MaterialEmployTable;","import React, { Component } from 'react';\nimport Header from \"./components/header\";\nimport MaterialEmployTable from \"./components/table\"\n\n\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <>\n        <Header />\n        <MaterialEmployTable\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}